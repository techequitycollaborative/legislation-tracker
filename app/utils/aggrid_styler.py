#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ag Grid DataFrame Styler
Created on Oct 3, 2024
@author: danyasherbini

This script contains settings for interactive Ag Grid data frames on Streamlit, 
which are clickable/editable data tables.

"""

from st_aggrid import AgGrid
from st_aggrid.grid_options_builder import GridOptionsBuilder
from st_aggrid.shared import GridUpdateMode
from st_aggrid.shared import ColumnsAutoSizeMode


# Ag grid styler function for bills table
def draw_bill_grid(
        df,
        formatter: dict = None,
        selection='single',
        use_checkbox=True,
        #header_checkbox = True, -- don't need this since we are only doing single selection
        fit_columns=True, # change to true to make all columns the same width/fit to the table width
        theme='streamlit', # options = streamlit, alpine, balham, material
        height: int = 500,
        wrap_text: bool = True,
        auto_height: bool = False,
        key=None,
        css: dict = None
):

    # Initialize the GridOptionsBuilder from the dataframe passed into the function
    builder = GridOptionsBuilder().from_dataframe(df)
    
    # Configure default column settings for all columns
    builder.configure_default_column(
        enableFilter=True,
        filter='agTextColumnFilter',
        floatingFilter=True, # floating filter: adds a row under the header row for the filter
        columnSize='sizeToFit'
        )
    
    # Configure special settings for certain columns (batch)
    builder.configure_columns(['bill_text','leginfo_link','coauthors','bill_history','leg_session','openstates_bill_id','chamber','event_text'],hide=True) # hide these columns in the initial dataframe
    
    # Configure special settings for individual columns
    #builder.configure_column('checkbox', headerName='', checkboxSelection=True, width=50, pinned='left') # option to add a specific checkbox column
    builder.configure_column('openstates_bill_id',headerName = 'Bill ID')
    builder.configure_column('bill_number',headerName = 'Bill Number',pinned='left', checkboxSelection=True) # pin this column, make it the checkbox column
    builder.configure_column('bill_name',headerName = 'Bill Name') # set width of column
    builder.configure_column('author',headerName = 'Author', headerTooltip='Primary author of the bill. Select bill to view coauthors.')
    builder.configure_column('coauthors',headerName = 'Coauthor(s)')
    builder.configure_column('status',headerName = 'Status', headerTooltip='Current status of the bill (sourced from LegInfo).')
    builder.configure_column('leginfo_link',headerName = 'Link')
    builder.configure_column('leg_session',headerName = 'Session')
    builder.configure_column('date_introduced',headerName = 'Date Introduced',type=["dateColumnFilter", "customDateTimeFormat"],custom_format_string="MM-dd-yyyy",sortable=True) # have to add special arguments to enable date type filter and remove timestamp
    builder.configure_column('chamber',headerName = 'Chamber',filter='agSetColumnFilter')
    builder.configure_column('bill_text',headerName = 'Bill Text')
    builder.configure_column('bill_history',headerName = 'Bill History')
    builder.configure_column('bill_topic',headerName = 'Bill Topic', headerTooltip='Primary subject(s) of the bill (generated by Tech Equity). For full list of bill topics, see above.') #, filter='agSetColumnFilter') -- agset filter not available in free Ag Grid version (must have subscription)
    builder.configure_column('bill_event',headerName = 'Bill Event',type=["dateColumnFilter", "customDateTimeFormat"],custom_format_string="MM-dd-yyyy",sortable=True, headerTooltip='Date of upcoming event with this bill on the agenda (if applicable).') # have to add special arguments to enable date type filter and remove timestamp
    builder.configure_column('event_text',headerName = 'Event Details')
    builder.configure_column('last_updated_on',headerName = 'Updated as of',type=["dateColumnFilter", "customDateTimeFormat"],custom_format_string="MM-dd-yyyy",sortable=True, headerTooltip='Date of last update to this bill on LegInfo.')

    
    
    builder.configure_selection(selection_mode=selection, use_checkbox=use_checkbox) # Configure how user selects rows
    builder.configure_side_bar(filters_panel=True, columns_panel=False) # configure the sidebar panel
    #builder.configure_pagination(enabled=True, paginationAutoPageSize=True, paginationPageSize=10) # can add pagination instead of making the table scrollable
    builder.configure_auto_height(autoHeight=False) # configure height of the table
    
    # Build the grid options dictionary
    grid_options = builder.build()

    return AgGrid(
        df,
        gridOptions=grid_options, # pass the grid options dictionary built above
        update_mode=GridUpdateMode.SELECTION_CHANGED | GridUpdateMode.VALUE_CHANGED, # ensures the df is updated dynamically
        allow_unsafe_jscode=True,
        fit_columns_on_grid_load=fit_columns, # fit all columns equally on page load
        height=height,
        wrap_text=wrap_text,
        theme=theme,
        key=key,
        css=css,
        #enable_enterprise_modules=False # this might get rid of the ag grid trial watermark but also disables the filter/pivot on the side of the table
    )

############################################################


# Ag grid styler function for legislators table
def draw_leg_grid(
        df,
        formatter: dict = None,
        selection='single',
        use_checkbox=True, 
        #header_checkbox = True, -- turned off for legislators table
        fit_columns=True, # change to True to make all column width based on the variable and fit the entire table to the window frame
        theme='streamlit', # options = streamlit, alpine, balham, material
        height: int = 600,
        wrap_text: bool = False,
        auto_height: bool = False,
        key=None,
        css: dict = None
):

    # Initialize the GridOptionsBuilder from the dataframe passed into the function
    builder = GridOptionsBuilder().from_dataframe(df)
    
    # Configure default column settings for all columns
    builder.configure_default_column(
        enableFilter=True,
        filter='agTextColumnFilter',
        floatingFilter=True, # floating filter: adds a row under the header row for the filter
        columnSize='sizeToFit'
        )
    
    # Configure special settings for certain columns (batch)
    builder.configure_columns(
        [
        'openstates_people_id',
        'district',
        'other_names',
        'ext_sources',
        'office_details',
        'issue_contacts',
        'last_updated_on'
        ],
        hide=True
        )
    
    # Configure special settings for individual columns 
    builder.configure_column('name',pinned='left',headerName = 'Name', checkboxSelection=True)
    # builder.configure_column('district',headerName = 'District',filter='agNumberColumnFilter', headerClass='left-align-header') # left align to make sure column header is justified left like the rest of the columns
    builder.configure_column('party',headerName = 'Party',filter='agSetColumnFilter')
    builder.configure_column('chamber',headerName = 'Chamber',filter='agSetColumnFilter')
    # builder.configure_column('last_updated_on',headerName = 'Updated as of',type=["dateColumnFilter", "customDateTimeFormat"],custom_format_string="MM-dd-yyyy",sortable=True)

    
    # Configure how user selects rows -- turned off for legislators table
    builder.configure_selection(selection_mode=selection, use_checkbox=use_checkbox) 
    builder.configure_auto_height(autoHeight=False) # configure height of the table
    
    # Build the grid options dictionary
    grid_options = builder.build()

    return AgGrid(
        df,
        gridOptions=grid_options, # pass the grid options dictionary built above
        update_mode=GridUpdateMode.SELECTION_CHANGED | GridUpdateMode.VALUE_CHANGED, # ensures the df is updated dynamically
        allow_unsafe_jscode=True,
        fit_columns_on_grid_load=fit_columns,
        height=height,
        theme=theme,
        key=key,
        css=css
    )

############################################################


def draw_committee_grid(
        df,
        formatter: dict = None,
        selection='single',
        use_checkbox=True,
        fit_columns=True, # change to false to make all column width based on the variable
        theme='streamlit', # options = streamlit, alpine, balham, material
        height: int = 600,
        wrap_text: bool = False,
        auto_height: bool = False,
        key=None,
        css: dict = None
):
    # Initialize the GridOptionsBuilder from the dataframe passed into the function
    builder = GridOptionsBuilder().from_dataframe(df)
    
    # Configure default column settings for all columns
    builder.configure_default_column(
        enableFilter=True,
        filter='agTextColumnFilter',
        floatingFilter=True, # floating filter: adds a row under the header row for the filter
        wrap_text=wrap_text,  
        # flex=1, # Allow columns to shrink and grow
        # minWidth=50,
        # maxWidth=150,
        # autoHeight=auto_height, 
        # suppressSizeToFit=True # disable size-to-fit to avoid horizontal scrolling    
        columnSize='sizeToFit',
        )
    
    # Configure special settings for certain columns (batch)
    # hide these columns in the initial dataframe
    builder.configure_columns(
        [
        'committee_id', 
        'webpage_link', 
        'chamber_id', 
        'committee_members', 
        'committee_event', 
        'member_count', 
        # 'total_members'
    ],hide=True) 
    
    # Configure special settings for individual columns
    # pin this column, make it the checkbox column
    builder.configure_column(
        'committee_name', 
        headerName = 'Committee Name',
        pinned='left', 
        checkboxSelection=True,
        # wrapText=True,
        # minWidth=100,  # Larger minimum
        # maxWidth=200,  # Larger maximum
        # autoSize=True,  # Enable auto-sizing
    ) 
    # other columns
    builder.configure_column('chamber',headerName = 'Chamber', minWidth=100) # Smaller width
    builder.configure_column('committee_chair', headerName = 'Chairperson', minWidth=150) 
    builder.configure_column('committee_vice_chair', headerName = 'Vice Chairperson', minWidth=150) 
    builder.configure_column(
        'next_hearing', 
        headerName = 'Next Upcoming Hearing', 
        type=["dateColumnFilter", "customDateTimeFormat"],
        custom_format_string="MM-dd-yyyy",
        sortable=True,
        minWidth=100 # Smaller width
    )
    builder.configure_column('total_members', headerName = 'No. Members', minWidth=150) 

    # Configure how user selects rows
    builder.configure_selection(selection_mode=selection, use_checkbox=use_checkbox) 

    # configure the sidebar panel
    builder.configure_side_bar(filters_panel=True, columns_panel=False) 

    # configure height of the table
    builder.configure_auto_height(autoHeight=False) 
    
    # Build the grid options dictionary
    grid_options = builder.build()

    return AgGrid(
        df,
        gridOptions=grid_options, # pass the grid options dictionary built above
        update_mode=GridUpdateMode.SELECTION_CHANGED | GridUpdateMode.VALUE_CHANGED, # ensures the df is updated dynamically
        allow_unsafe_jscode=True,
        fit_columns_on_grid_load=fit_columns, # fit all columns equally on page load
        height=height,
        wrap_text=wrap_text,
        theme=theme,
        key=key,
        css=css
    )


############################################################

def draw_advocacy_grid(
        df,
        formatter: dict = None,
        #selection='single', -- selection turned off
        #use_checkbox=True, -- turned off
        #header_checkbox = True, -- turned off
        fit_columns=True, # change to True to make all column width based on the variable and fit the entire table to the window frame
        theme='streamlit', # options = streamlit, alpine, balham, material
        height: int = 600,
        wrap_text: bool = False,
        auto_height: bool = False,
        key=None,
        css: dict = None
):

    # Reorder columns: move 'last_updated_org_name' (Organization) to second position
    cols = list(df.columns)
    if 'last_updated_org_name' in cols and 'bill_number' in cols:
        cols.insert(1, cols.pop(cols.index('last_updated_org_name')))  # move org column to index 1 (second)
        df = df[cols]

    # Initialize the GridOptionsBuilder from the dataframe passed into the function
    builder = GridOptionsBuilder().from_dataframe(df)

    # Configure default column settings for all columns
    builder.configure_default_column(
        enableFilter=True,
        filter='agTextColumnFilter',
        floatingFilter=True, # floating filter: adds a row under the header row for the filter
        columnSize='sizeToFit'
        )
    
    # Configure special settings for certain columns (batch)
    builder.configure_columns(['bill_custom_details_id','openstates_bill_id','last_updated_org_id','community_sponsor','coalition','action_taken','last_updated_at'],hide=True)
    
    # Configure special settings for individual columns 
    builder.configure_column('bill_number',pinned='left',headerName = 'Bill Number')
    builder.configure_column('last_updated_org_name',headerName = 'Organization',filter='agSetColumnFilter')
    builder.configure_column('org_position',headerName = 'Position',filter='agSetColumnFilter')
    builder.configure_column('priority_tier',headerName = 'Priority',filter='agSetColumnFilter')
    builder.configure_column('assigned_to',headerName = 'Point of Contact: Name',filter='agSetColumnFilter')
    builder.configure_column('last_updated_by',headerName = 'Point of Contact: Email',filter='agSetColumnFilter')
    builder.configure_column('letter_of_support',headerName = 'Letter of Support',filter=None)
    builder.configure_column('last_updated_on',headerName = 'Last Updated',filter=None)
    
    # Configure how user selects rows -- turned off for legislators table
    #builder.configure_selection(selection_mode=selection, use_checkbox=use_checkbox) # no selection needed for legislator table
    builder.configure_auto_height(autoHeight=False) # configure height of the table
    
    # Build the grid options dictionary
    grid_options = builder.build()

    return AgGrid(
        df,
        gridOptions=grid_options, # pass the grid options dictionary built above
        update_mode=GridUpdateMode.SELECTION_CHANGED | GridUpdateMode.VALUE_CHANGED, # ensures the df is updated dynamically
        allow_unsafe_jscode=True,
        fit_columns_on_grid_load=fit_columns,
        height=height,
        theme=theme,
        key=key,
        css=css
    )